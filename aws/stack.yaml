Parameters:
  Name:
    Description: Name of all resources
    Type: String
  VpcCIDR:
    Description: CIDR block for VPC IP address range
    Type: String
    Default: 10.0.0.0/16
  BacknetCIDR:
    Description: CIDR block for back end subnet
    Type: String
    Default: 10.0.0.0/24
  Frontnet1CIDR:
    Description: CIDR block for front end subnet in first availability zone
    Type: String
    Default: 10.0.1.0/24
  Frontnet2CIDR:
    Description: CIDR block for front end subnet in second availability zone
    Type: String
    Default: 10.0.2.0/24
  InstanceType:
    Description: EC2 machine instance type
    Type: String
    Default: t2.micro
  KeyName:
    Description: ssh key name for EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  CertificateArn:
    Description: ARN of HTTPS certificate
    Type: String
  Hostname:
    Description: Unqualified name of host
    Type: String
  Zone:
    Description: Name of hosted zone in which host will live
    Type: String
  BaseAMI:
    Description: AMI to start the instance from
    Type: AWS::EC2::Image::Id
    Default: ami-751b2c63
  VolumeSize:
    Description: Number of gigabytes for root volume.
    Type: String
    Default: 8

# I would have wanted the default AMI to be region specific,
# indirecting through a lookup in the AWSRegionToAMI mapping,
# but I can't figure out how to do that.  The code snippet for
# a lookup is
# !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-751b2c63

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Sub ${Name}/vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Name}/gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Frontnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref Frontnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Name}/az1/Frontnet
  Frontnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref Frontnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Name}/az2/Frontnet

  FrontnetRoutetab:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Name}/pubroutetab
  FrontnetDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref FrontnetRoutetab
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Frontnet1RoutetabAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontnetRoutetab
      SubnetId: !Ref Frontnet1
  Frontnet2RoutetabAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontnetRoutetab
      SubnetId: !Ref Frontnet2

  # Back End subnet
  Backnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref BacknetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Name}/backnet
  BacknetRoutetab:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Name}/privroutetab
  BacknetDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref BacknetRoutetab
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  BacknetRoutetabAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BacknetRoutetab
      SubnetId: !Ref Backnet

  # Back end EC2 instance
  Instance:
    Type: AWS::EC2::Instance
    DependsOn: BackSecgroup
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref BackSecgroup
      KeyName: !Ref KeyName
      ImageId: !Ref BaseAMI
      SubnetId: !Ref Backnet
      Volumes:
        - Device: /dev/sda1
          VolumeId: !Ref Volume
      Tags:
        - Key: Name
          Value: !Sub ${Name}/instance
  Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Size: !Ref VolumeSize
      Tags:
        - Key: Name
          Value: !Sub ${Name}/rootvolume
  BackSecgroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: FrontSecgroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Back end security group
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref FrontSecgroup
          IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub ${Name}/secgroup/front

  # Front end load balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontSecgroup
      Subnets:
        - !Ref Frontnet1
        - !Ref Frontnet2
      Tags:
        - Key: Name
          Value: !Sub ${Name}/lb/load-balancer
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8888
      Protocol: "HTTP"
      Targets:
        - Id: !Ref Instance
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Name}/lb/tg
  FrontSecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Front end security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${Name}/secgroup/front

  # DNS records
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub DNS records for ${Name}
      HostedZoneName: !Ref Zone
      RecordSets:
        - Name: !Sub ${Hostname}.${Zone}
          AliasTarget:
            DNSName: !GetAtt LoadBalancer.DNSName
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          Type: A
        - Name: !Sub ssh.${Hostname}.${Zone}
          ResourceRecords:
            - !GetAtt Instance.PublicIp
          TTL: 300
          Type: A
